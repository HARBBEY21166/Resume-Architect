
import { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType } from 'docx';
import { saveAs } from 'file-saver';
import type { ParsedCvData } from '@/types/cv';

const createSection = (
  sectionTitle: string,
  content: string | undefined | null,
  headingLevel: HeadingLevel
): Paragraph[] => {
  const paragraphs: Paragraph[] = [];
  if (sectionTitle) {
    paragraphs.push(
      new Paragraph({
        text: sectionTitle,
        heading: headingLevel,
        // Spacing for heading is primarily controlled by its style definition (e.g., Heading3)
      })
    );
  }
  if (content) {
    const lines = content.split('\n');
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line.trim()) {
        const isBullet = line.trim().startsWith('- ') || line.trim().startsWith('* ');
        const textContent = isBullet ? line.substring(line.indexOf(' ') + 1).trim() : line.trim();
        
        const textRuns = [];
        // Special handling for Experience section to bold titles/company lines
        if (sectionTitle.toLowerCase() === 'experience' && !isBullet && textContent) {
          textRuns.push(new TextRun({ text: textContent, bold: true }));
        } else if (textContent) {
          textRuns.push(new TextRun(textContent));
        } else {
          // Handle cases where textContent might be empty after trimming, to avoid empty TextRun
          continue;
        }

        if (isBullet) {
          paragraphs.push(
            new Paragraph({
              children: textRuns,
              bullet: { level: 0 },
              indent: { left: 720 }, // 0.5 inch indent
              spacing: { after: 80 }, // Spacing after bullet items
              style: 'normalPara', // Apply base font style
            })
          );
        } else {
          paragraphs.push(
            new Paragraph({
              children: textRuns,
              // Spacing after regular paragraphs is controlled by 'normalPara' style (100)
              // or by the specific line if it's an experience title (which is a normalPara too)
              style: 'normalPara',
            })
          );
        }
      }
    }
  }
  // Add a bit more space after a section if it had content, before the next section starts
  // This is primarily handled by the 'before' spacing of the next Heading3
  return paragraphs;
};


export async function generateDocxForModernTemplate(data: ParsedCvData): Promise<void> {
  const { name, contactInformation, objective, experience, technicalSkills, personalSkills, education, certifications, interest } = data;

  const email = contactInformation.match(/[\w.-]+@[\w.-]+\.\w+/)?.[0];
  const phone = contactInformation.match(/(\(\d{3}\)\s*\d{3}-\d{4}|\d{3}-\d{3}-\d{4}|\d{10})/)?.[0];
  const linkedIn = contactInformation.match(/linkedin\.com\/in\/[\w-]+/)?.[0];

  const contactParts: string[] = [];
  if (email) contactParts.push(email);
  if (phone) contactParts.push(phone);
  if (linkedIn) contactParts.push(linkedIn);


  const doc = new Document({
    creator: "CV-Genius",
    title: `${name || 'CV'} - Modern Template`,
    description: "Curriculum Vitae generated by CV-Genius",
    styles: {
      default: {
        heading1: {
          run: { size: 48, bold: true, font: "Calibri" }, // 24pt
          paragraph: { alignment: AlignmentType.CENTER, spacing: { after: 200, before: 0 } },
        },
        // heading2 is not currently used but defined for completeness
        heading2: {
          run: { size: 32, bold: true, font: "Calibri" }, // 16pt
          paragraph: { spacing: { before: 300, after: 150 } },
        },
        heading3: { // Used for section titles like Objective, Experience
            run: { size: 28, bold: true, font: "Calibri", color: "4F81BD" }, // 14pt, Accent color
            paragraph: { spacing: { before: 300, after: 150 } }, // Increased spacing around section titles
        },
      },
      paragraphStyles: [
        {
          id: "normalPara",
          name: "Normal Para",
          basedOn: "Normal",
          next: "Normal",
          quickFormat: true,
          run: { font: "Calibri", size: 22 }, // 11pt
          paragraph: { spacing: { after: 100, before: 0 } }, // Default spacing after paragraphs
        },
        {
          id: "contactInfo",
          name: "Contact Info",
          basedOn: "Normal",
          next: "Normal",
          quickFormat: true,
          run: { font: "Calibri", size: 20 }, // 10pt
          paragraph: { alignment: AlignmentType.CENTER, spacing: { after: 240, before: 0 } }, // Spacing after contact block
        }
      ],
    },
    sections: [{
      properties: {
        page: {
          margin: {
            top: 720, // 0.5 inch
            right: 720,
            bottom: 720,
            left: 720,
          },
        },
      },
      children: [
        new Paragraph({
          text: name || "Your Name",
          heading: HeadingLevel.HEADING_1,
          // Alignment and spacing are part of heading1 style
        }),
        new Paragraph({
          text: contactParts.join(' | '),
          style: 'contactInfo',
          // Alignment and spacing are part of contactInfo style
        }),
        ...(objective ? createSection("Objective", objective, HeadingLevel.HEADING_3) : []),
        ...(experience ? createSection("Experience", experience, HeadingLevel.HEADING_3) : []),
        ...(education ? createSection("Education", education, HeadingLevel.HEADING_3) : []),
        ...(technicalSkills ? createSection("Technical Skills", technicalSkills, HeadingLevel.HEADING_3) : []),
        ...(personalSkills ? createSection("Personal Skills", personalSkills, HeadingLevel.HEADING_3) : []),
        ...(certifications ? createSection("Certifications", certifications, HeadingLevel.HEADING_3) : []),
        ...(interest ? createSection("Interests", interest, HeadingLevel.HEADING_3) : []),
      ],
    }],
  });

  const blob = await Packer.toBlob(doc);
  saveAs(blob, `${(name || 'CV').replace(/\s+/g, '_')}_Modern.docx`);
}
